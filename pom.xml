<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>testSSMStepByStep</groupId>
  <artifactId>testSSMStepByStep</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>testSSMStepByStep Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://localhost:8080/testSSMStepByStep</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<!--    <maven.compiler.source>1.7</maven.compiler.source>-->
<!--    <maven.compiler.target>1.7</maven.compiler.target>-->
      <mysql.version>5.1.6</mysql.version>
      <mybatis.version>3.4.5</mybatis.version>
  </properties>

  <dependencies>
    <dependency>
<!--      回归测试框架-->
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
<!--      aspectjweaver是spring的切入点表达式需要用的包-->
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>1.8.13</version>
    </dependency>

<!--    <dependency>-->
<!--&lt;!&ndash;      这个jar文件包含Spring框架基本的核心工具类&ndash;&gt;-->
<!--      <groupId>org.springframework</groupId>-->
<!--      <artifactId>spring-core</artifactId>-->
<!--      <version>4.3.14.RELEASE</version>-->
<!--    </dependency>-->
<!--    <dependency>-->
<!--      <groupId>org.springframework</groupId>-->
<!--      <artifactId>spring-expression</artifactId>-->
<!--      <version>4.3.14.RELEASE</version>-->
<!--    </dependency>-->
<!--    <dependency>-->
<!--&lt;!&ndash;      这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。&ndash;&gt;-->
<!--      <groupId>org.springframework</groupId>-->
<!--      <artifactId>spring-beans</artifactId>-->
<!--      <version>4.3.14.RELEASE</version>-->
<!--    </dependency>-->
<!--    代理是实现AOP的技术手段-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
      <version>4.3.14.RELEASE</version>
    </dependency>
    <dependency>
<!--      这个jar文件为Spring核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类-->
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.3.14.RELEASE</version>
    </dependency>
<!--    <dependency>-->
<!--&lt;!&ndash;        对spring-context的支持包&ndash;&gt;-->
<!--      <groupId>org.springframework</groupId>-->
<!--      <artifactId>spring-context-support</artifactId>-->
<!--      <version>4.3.14.RELEASE</version>-->
<!--    </dependency>-->
    <dependency>
<!--        Spring-tx模块负责在spring框架中实现事务管理功能。以aop切面的方式将事务注入到业务代码中，并实现不同类型的事务管理器-->
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>4.3.14.RELEASE</version>
    </dependency>
    <dependency>
<!--&lt;!&ndash;        数据库资源管理和数据处理&ndash;&gt;-->
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>4.3.14.RELEASE</version>
    </dependency>
<!--    <dependency>-->
<!--&lt;!&ndash;        将Java对象状态自动映射到关系数据库中的数据上，从而提供透明化的持久化支持，即把一种形式转化为另一种形式。&ndash;&gt;-->
<!--      <groupId>org.springframework</groupId>-->
<!--        <artifactId>spring-orm</artifactId>-->
<!--        <version>4.3.14.RELEASE</version>-->
<!--    </dependency>-->
      <dependency>
<!--        包含web应用开发时，用到spring框架时所需的核心类，包括自动载入webapplicationcontext特性的类、struts与jsf集成类、文件上传的支持类、filter类和大量工具辅助类-->
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.3.14.RELEASE</version>
    </dependency>
    <dependency>
<!--      这个jar文件包含Spring MVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。当然，如果你的应用使用了独立的MVC框架，则无需这个JAR文件里的任何类。-->
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.3.14.RELEASE</version>
    </dependency>
<!--    <dependency>-->
<!--      <groupId>javax.ws.rs</groupId>-->
<!--      <artifactId>javax.ws.rs-api</artifactId>-->
<!--      <version>2.0</version>-->
<!--    </dependency>-->
      <dependency>
<!--          配置jsp，servlet可识别-->
          <groupId>javax.servlet.jsp</groupId>
          <artifactId>jsp-api</artifactId>
          <version>2.0</version>
          <scope>provided</scope>
      </dependency>

    <!--jstl -->
    <dependency>
<!--        jstl标签库-->
      <groupId>jstl</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>



    <dependency>
<!--        支持HttpServletRequest和HttpServletResponse等对象-->
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope>
    </dependency>


<!--  <dependency>-->
<!--&lt;!&ndash;      将JSON格式的数据转化为类对象&ndash;&gt;-->
<!--    <groupId>com.fasterxml.jackson.core</groupId>-->
<!--    <artifactId>jackson-databind</artifactId>-->
<!--    <version>2.9.4</version>-->
<!--  </dependency>-->
<!--      配置非关系型数据库-->
      <dependency>
          <groupId>redis.clients</groupId>
          <artifactId>jedis</artifactId>
          <version>2.8.1</version>
      </dependency>
      <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-simple</artifactId>
          <version>1.7.25</version>
          <scope>compile</scope>
      </dependency>


      <dependency>
<!--          数据库相关-->
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>8.0.15</version>
      </dependency>
      <dependency>
<!--          数据库之mybatis相关-->
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis</artifactId>
          <version>${mybatis.version}</version>
      </dependency>
      <dependency>
<!--          mybatis在spring下相关配置-->
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>1.3.0</version>
      </dependency>
      <dependency>
          <groupId>cglib</groupId>
          <artifactId>cglib</artifactId>
          <version>3.1</version>
      </dependency>
      <dependency>

<!--          数据库相关之c3p0连接池相关-->
          <groupId>c3p0</groupId>
          <artifactId>c3p0</artifactId>
          <version>0.9.1.2</version>
          <type>jar</type>
          <scope>compile</scope>
      </dependency>
      <dependency>
          <groupId>org.springframework.data</groupId>
          <artifactId>spring-data-redis</artifactId>
          <version>1.4.1.RELEASE</version>
      </dependency>
      <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.9.10.7</version>
      </dependency>
      <dependency>
          <groupId>org.codehaus.groovy</groupId>
          <artifactId>groovy</artifactId>
          <version>2.4.16</version>
      </dependency>
      <dependency>
          <groupId>com.alibaba</groupId>
          <artifactId>druid</artifactId>
          <version>1.0.9</version>
      </dependency>
  </dependencies>
  <build>
    <finalName>testSSMStepByStep</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
<!--            项目资源文件并拷贝到输出目录-->
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
          <plugin>
              <artifactId>maven-compiler-plugin</artifactId>
              <version>3.8.0</version>
          </plugin>
            <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->

        <plugin>
<!--            用于mvn 生命周期的测试阶段-->
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
<!--            解析war包，实现war之间的依赖注入配置-->
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
<!--            maven deploy plugin主要是为了用来将artifact部署到远程仓库中-->
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- tomcat插件控制 -->
        <plugin>
          <groupId>org.apache.tomcat.maven</groupId>
          <artifactId>tomcat7-maven-plugin</artifactId>
          <version>2.2</version>
          <configuration>
            <!--端口控制-->
            <port>8080</port>
            <!--项目路径控制意味着http://localhost:8080/xxx,格式必须/xxx-->
            <path>/testSSMStepByStep</path>
            <!--编码-->
            <uriEncoding>UTF-8</uriEncoding>
          </configuration>
        </plugin>
        <!-- maven插件控制 -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
            <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.1</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <encoding>utf-8</encoding>
          </configuration>
        </plugin>


      </plugins>
    </pluginManagement>
  </build>

</project>
